call plug#begin('~/.vim/plugged')

" VCS
Plug 'tpope/vim-fugitive'

" System
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-eunuch'
Plug 'christoomey/vim-tmux-navigator'
Plug 'flazz/vim-colorschemes'
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'
Plug 'sickill/vim-pasta'
Plug 'roman/golden-ratio'
Plug 'w0rp/ale'
" Plug 'flowtype/vim-flow', { 'for': 'javascript' }

" Plug 'Shougo/neosnippet.vim'
" Plug 'Shougo/neosnippet-snippets'

" Autocomplete
" if has('nvim')
"   Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
" else
"   Plug 'Shougo/deoplete.nvim'
"   Plug 'roxma/nvim-yarp'
"   Plug 'roxma/vim-hug-neovim-rpc'
" endif

" Languages
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-endwise'
Plug 'leafgarland/typescript-vim'
Plug 'ianks/vim-tsx'

Plug 'neoclide/coc.nvim', {'branch': 'release'}

call plug#end()

" set background=light
" colorscheme PaperColor

set background=dark
colorscheme gruvbox

" Change leader
nnoremap <SPACE> <Nop>
let mapleader = " "
let g:mapleader = " "

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

" Basics
set relativenumber                      " always show line numbers
set number                              " Show the currently line number
set hidden                              " Allow un-saved buffers in background
set clipboard=unnamed                   " Share system clipboard.
set backspace=indent,eol,start          " Make backspace behave normally.
set backupskip=/tmp/*,/private/tmp/*
set backupdir=/tmp/
set directory=/tmp/                     " swap files
set ffs=unix,dos,mac                    " Default file types
set nowrap                              " don't wrap lines
set showmatch                           " set show matching parenthesis
set hlsearch                            " highlight search terms
set incsearch                           " show search matches as you type
set history=1000                        " remember more commands and search history
set undolevels=1000                     " use many muchos levels of undo
set visualbell                          " don't beep
set noerrorbells                        " don't beep
set wildcharm=<Tab>

" Default Tabs & spaces
set tabstop=2     " a tab is two spaces
set shiftwidth=2  " number of spaces to use for autoindenting
set softtabstop=2
set expandtab
set shiftround    " use multiple of shiftwidth when indenting with '<' and '>'
set smarttab      " insert tabs on the start of a line according to
                  "    shiftwidth, not tabstop
set autoindent    " always set autoindenting on
set copyindent    " copy the previous indentation on autoindenting
set cursorline    " highlight current line

" Hide scrollbars
set guioptions=Ace

" set statusline=\ %n
" set statusline+=\ %f
" set statusline+=\ %m
" set statusline+=%=
" set statusline+=\ %y

" Plugin Configurations
"""""""""""""""""""""""
" Trim trailing whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" let g:deoplete#enable_at_startup = 1

" let g:neosnippet#snippets_directory = '~/.vim/snippets'

" imap <expr><TAB>  (neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>")
" imap <expr><S-TAB> "\<S-TAB>"
" smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
" \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

let g:golden_ratio_exclude_nonmodifiable = 1
let g:javascript_opfirst = 1

let g:ale_fixers = {
\   '*': ['trim_whitespace'],
\   'javascript': ['prettier'],
\   'typescript': ['prettier'],
\   'ruby': ['rubocop'],
\}

let g:ale_linters = {
\   'javascript': ['eslint', 'prettier'],
\   'typescript': ['eslint', 'tslint', 'prettier'],
\   'ruby': ['rubocop'],
\}

let g:ale_fix_on_save = 1
let g:ale_linters_explicit = 1

"Use locally installed flow
let local_flow = finddir('node_modules', '.;') . '/.bin/flow'
if matchstr(local_flow, "^\/\\w") == ''
    let local_flow= getcwd() . "/" . local_flow
endif
if executable(local_flow)
  let g:flow#flowpath = local_flow
endif


" Key Bindings
"""""""""""""""""""""""

"make < > shifts keep selection
vnoremap < <gv
vnoremap > >gv

nnoremap <leader>b :Buffers<CR>
nnoremap <leader>f :Files <CR>
nnoremap <leader>g :GFiles?<CR>

nnoremap <leader>q :q<CR>

" Open files
nnoremap <leader>d :vsp %:h/<Tab>
nnoremap <leader>e :e %:h/<Tab>

nnoremap <leader><space> :noh<cr>
vnoremap <leader><space> <esc>:noh<cr>

nnoremap <leader>c  :ccl<CR>:lclose<CR>

nnoremap - :Explore<cr><cr>

nnoremap <leader>s  :w<CR>

map <Leader>t :call RunCurrentSpecFile()<CR>

cnoremap jk <ESC>
inoremap jk <ESC>

" Open vimrc in a split
nnoremap <leader>v :vsp ~/.vimrc<CR>

" stupid kinesis
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" imap <C-k>     <Plug>(neosnippet_expand_or_jump)
" smap <C-k>     <Plug>(neosnippet_expand_or_jump)
" xmap <C-k>     <Plug>(neosnippet_expand_target)

" when in netrw in tmux-navigator <c-l> won't move you right as it tries to
" refresh netrw instead. This overrides that so we can <c-l> to our hearts
" content
augroup netrw_mapping
  autocmd!
  autocmd filetype netrw call NetrwMapping()
augroup END

function! NetrwMapping()
  nnoremap <silent> <buffer> <c-l> :TmuxNavigateRight<CR>
endfunction

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction
